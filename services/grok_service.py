import requests
import os
import json
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Groq API configuration
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

if not GROQ_API_KEY:
    raise ValueError("GROQ_API_KEY not found in environment variables")

GROQ_URL = "https://api.groq.com/openai/v1/chat/completions"

SYSTEM_PROMPT = """
You are an AI meeting assistant. Your role is to analyze raw transcripts and generate structured, concise notes.

Always format output in this structure:

**Executive Summary:**
Brief overview of the meeting purpose and main outcomes.

**Key Discussion Points:**
• Main topics discussed
• Important details and context

**Action Items:**
• Specific tasks with responsible parties (if mentioned)
• Deadlines (if mentioned)

**Decisions Made:**
• Clear decisions reached during the meeting
• Next steps agreed upon

Please be concise but comprehensive in your analysis.
"""

def summarize_with_groq(transcript: str, model: str = "llama-3.1-70b-versatile") -> str:
    """
    Use Groq API to summarize transcript into structured notes.
    
    Available models:
    - llama-3.1-70b-versatile (default)
    - llama-3.1-8b-instant
    - llama-3.2-90b-text-preview
    - mixtral-8x7b-32768
    - gemma-7b-it
    """
    if not transcript or not transcript.strip():
        return "Error: No transcript provided to summarize."

    if not GROQ_API_KEY:
        return "Error: Groq API key not configured."

    payload = {
        "model": model,
        "messages": [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": f"Please summarize this meeting transcript:\n\n{transcript}"}
        ],
        "temperature": 0.7,
        "max_tokens": 1000,
        "top_p": 0.8,
        "stream": False
    }

    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }

    try:
        print(f"🔄 Making request to Groq API...")
        print(f"📝 Transcript length: {len(transcript)} characters")
        print(f"🤖 Using model: {model}")
        
        response = requests.post(GROQ_URL, headers=headers, json=payload, timeout=60)
        
        print(f"📡 Response Status: {response.status_code}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                print(f"✅ Successfully received response from Groq")
                
                # Debug: Print the full response structure
                print(f"🔍 Response keys: {list(data.keys())}")
                
                if 'choices' in data and len(data['choices']) > 0:
                    content = data['choices'][0]['message']['content']
                    print(f"📄 Content length: {len(content)} characters")
                    print(f"📋 Content preview: {content[:100]}...")
                    return content
                else:
                    print(f"❌ No choices in response: {data}")
                    return "Error: No response generated by Groq - empty choices array"
                    
            except json.JSONDecodeError as e:
                print(f"❌ JSON decode error: {e}")
                print(f"📄 Raw response: {response.text[:500]}...")
                return f"Error: Invalid JSON response - {str(e)}"
                
        else:
            error_text = response.text
            print(f"❌ API Error {response.status_code}: {error_text}")
            
            # Try to parse error message
            try:
                error_data = response.json()
                if 'error' in error_data:
                    error_msg = error_data['error'].get('message', error_text)
                    return f"Error {response.status_code}: {error_msg}"
            except:
                pass
                
            return f"Error {response.status_code}: {error_text}"
                
    except requests.exceptions.Timeout:
        print("⏰ Request timed out")
        return "Error: Request timed out (60 seconds)"
    except requests.exceptions.ConnectionError as e:
        print(f"🌐 Connection error: {e}")
        return f"Error: Connection failed - {str(e)}"
    except requests.exceptions.RequestException as e:
        print(f"📡 Request error: {e}")
        return f"Error: Request failed - {str(e)}"
    except Exception as e:
        print(f"💥 Unexpected error: {e}")
        return f"Error: Unexpected error - {str(e)}"

def get_available_models():
    """Get list of available Groq models"""
    return [
        "llama-3.3-70b-versatile",  # Updated to match your working model
        "llama-3.1-70b-versatile",
        "llama-3.1-8b-instant", 
        "llama-3.2-90b-text-preview",
        "mixtral-8x7b-32768",
        "gemma-7b-it"
    ]

# Testing function
def test_api():
    """Test the Groq API connection"""
    test_transcript = """
    John: Hello team, let's discuss the Q3 budget. We need to allocate funds for the marketing campaign.
    Sarah: I think we should focus on digital marketing this quarter. The ROI has been much better.
    Mike: Agreed, let's allocate $50k for social media ads and $30k for Google Ads.
    John: That sounds reasonable. Sarah, can you prepare a detailed breakdown by next Friday?
    Sarah: Sure, I'll have it ready by then.
    """
    
    print("🚀 Testing Groq API Connection")
    print("="*60)
    print("Available models:", get_available_models())
    print("\n" + "="*60)
    
    # Test with the model that worked in Postman
    result = summarize_with_groq(test_transcript, "llama-3.3-70b-versatile")
    print("\n📋 Test Result:")
    print("-" * 40)
    print(result)
    print("-" * 40)

if __name__ == "__main__":
    test_api()