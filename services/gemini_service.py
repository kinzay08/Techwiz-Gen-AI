import requests
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Use consistent environment variable name - match what you have in your .env file
API_KEY = os.getenv("GOOGLE_API_KEY")  # Make sure this matches your .env file

if not API_KEY:
    raise ValueError("GOOGLE_API_KEY not found in environment variables")

URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key={API_KEY}"

SYSTEM_PROMPT = """
You are an AI meeting assistant. Your role is to analyze raw transcripts and generate structured, concise notes. 
Always format output in this structure:

**Executive Summary:**
Brief overview of the meeting purpose and main outcomes.

**Key Discussion Points:**
• Main topics discussed
• Important details and context

**Action Items:**
• Specific tasks with responsible parties (if mentioned)
• Deadlines (if mentioned)

**Decisions Made:**
• Clear decisions reached during the meeting
• Next steps agreed upon

Please be concise but comprehensive in your analysis.
"""

def summarize_with_gemini(transcript: str) -> str:
    """
    Use Gemini API to summarize transcript into structured notes.
    """
    if not transcript.strip():
        return "Error: No transcript provided to summarize."

    if not API_KEY:
        return "Error: Google API key not configured."

    payload = {
        "contents": [
            {"parts": [{"text": SYSTEM_PROMPT + "\n\nTranscript:\n" + transcript}]}
        ],
        "generationConfig": {
            "temperature": 0.7,
            "maxOutputTokens": 1000,
            "topP": 0.8,
            "topK": 10
        }
    }

    headers = {
        "Content-Type": "application/json"
    }

    try:
        response = requests.post(URL, headers=headers, json=payload, timeout=30)
        
        # Debug information
        print(f"Request URL: {URL}")
        print(f"Response Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if 'candidates' in data and len(data['candidates']) > 0:
                return data['candidates'][0]['content']['parts'][0]['text']
            else:
                return "Error: No response generated by Gemini"
        else:
            print(f"Error Response: {response.text}")
            return f"Error {response.status_code}: {response.text}"
            
    except requests.exceptions.Timeout:
        return "Error: Request timed out"
    except requests.exceptions.RequestException as e:
        return f"Error: Request failed - {str(e)}"
    except Exception as e:
        return f"Error: {str(e)}"


# Testing function
def test_api():
    """Test the Gemini API connection"""
    test_transcript = "John: Hello team, let's discuss the Q3 budget. We need to allocate funds for the marketing campaign."
    result = summarize_with_gemini(test_transcript)
    print("Test Result:")
    print(result)


if __name__ == "__main__":
    test_api()